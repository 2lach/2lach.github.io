{"version":3,"sources":["components/CookieConsent.js","App.js","serviceWorker.js","index.js"],"names":["checkConsent","name","v","document","cookie","match","CookieConsent","state","Consent","this","setState","value","days","d","Date","setTime","getTime","toGMTString","setCookie","hideOrShow","className","href","rel","target","onClick","hideConsent","Component","BadJokes","lazy","CoverImage","Links","Login","Avatar","App","useState","knock","setKnock","HelloWorld","fallback","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.967f44b9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { IoIosCloseCircle } from \"react-icons/all\";\n\nfunction setCookie(name, value, days) {\n  days = 365;\n  var d = new Date();\n  d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * days);\n  document.cookie = name + \"=\" + value + \";path=/;expires=\" + d.toGMTString();\n}\nfunction checkConsent(name) {\n  var v = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\n  return v ? v[2] : null;\n}\nclass CookieConsent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Consent: true\n    };\n  }\n\n  hideConsent() {\n    this.setState({\n      Consent: false\n    });\n    if (checkConsent() === null) {\n      setCookie(\"cookieConsentClicked\", 1, 365);\n    }\n  }\n\n  render() {\n    let hideOrShow = this.state.Consent ? \"CookieConsentStyle\" : \"hideConsent\";\n    return (\n      <footer className={hideOrShow}>\n        <div>\n          <div className=\"consentContent\">\n            This site uses{\" \"}\n            <a\n              className=\"consentContentA\"\n              href=\"https://en.wikipedia.org/wiki/HTTP_cookie\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Cookies\n            </a>{\" \"}\n            to make your visit easier\n          </div>\n          <IoIosCloseCircle\n            className=\"cookieBtn\"\n            onClick={() => this.hideConsent()}\n          >\n            X\n          </IoIosCloseCircle>\n        </div>\n      </footer>\n    );\n  }\n}\nexport { CookieConsent, checkConsent };\n","import \"./styles/App.css\";\n\nimport { CookieConsent, checkConsent } from \"./components/CookieConsent\";\nimport React, { Suspense, lazy, useState } from \"react\";\n\nconst BadJokes = lazy(() => import(\"./components/BadJokes\"));\nconst CoverImage = lazy(() => import(\"./components/CoverImage\"));\nconst Links = lazy(() => import(\"./components/Links\"));\nconst Login = lazy(() => import(\"./components/Login\"));\nconst Avatar = lazy(() => import(\"./components/Avatar\"));\n\nfunction App() {\n  const [knock, setKnock] = useState(0);\n  const HelloWorld = (\n    <>\n      <h1>Greetings pilgrim</h1>\n      <h2>Welcome to my little corner of the internet</h2>\n      <h2>I'am Stefan and enjoy I building things!</h2>\n      <h3>Besides that I'am also a Father and maker of various things.</h3>\n      <h3>\n        I have been known to think & sometimes I transform my thoughts into code\n      </h3>\n    </>\n  );\n  return (\n    <div>\n      <Suspense\n        fallback={\n          <div className=\"loadingMessage\">\n            <u>Winter</u> is coming...{\" \"}\n          </div>\n        }\n      >\n        <CoverImage />\n        <div className=\"app-container\">\n          <Avatar onClick={() => setKnock(knock + 1)} />\n          {knock > 3 && <Login />}\n          <div className=\"content\">\n            {HelloWorld}\n            <Links />\n          </div>\n          <>\n            <BadJokes />\n          </>\n          {!checkConsent(\"cookieConsentClicked\") && <CookieConsent />}\n        </div>\n      </Suspense>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"service-worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}