{"version":3,"sources":["serviceWorkerRegistration.js","components/CookieConsent.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkConsent","name","v","document","cookie","CookieConsent","Consent","this","setState","value","days","d","Date","setTime","getTime","toGMTString","setCookie","hideOrShow","className","href","rel","target","onClick","hideConsent","Component","BadJokes","lazy","CoverImage","Links","Avatar","App","HelloWorld","fallback","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2e1319f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React, { Component } from \"react\";\n\nimport { IoIosCloseCircle } from \"react-icons/all\";\n\nfunction setCookie(name, value, days) {\n  days = 365;\n  var d = new Date();\n  d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * days);\n  document.cookie = name + \"=\" + value + \";path=/;expires=\" + d.toGMTString();\n}\nfunction checkConsent(name) {\n  var v = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\n  return v ? v[2] : null;\n}\nclass CookieConsent extends Component {\n  state = {\n    Consent: true,\n  };\n  hideConsent() {\n    this.setState({\n      Consent: false,\n    });\n    if (checkConsent() === null) {\n      setCookie(\"cookieConsentClicked\", 1, 365);\n    }\n  }\n\n  render() {\n    let hideOrShow = this.state.Consent ? \"CookieConsentStyle\" : \"hideConsent\";\n    return (\n      <footer className={hideOrShow}>\n        <div>\n          <div className=\"consentContent\">\n            This site uses{\" \"}\n            <a\n              className=\"consentContentA\"\n              href=\"https://en.wikipedia.org/wiki/HTTP_cookie\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Cookies\n            </a>{\" \"}\n            to make your visit easier\n          </div>\n          <IoIosCloseCircle\n            className=\"cookieBtn\"\n            onClick={() => this.hideConsent()}\n          >\n            X\n          </IoIosCloseCircle>\n        </div>\n      </footer>\n    );\n  }\n}\nexport { CookieConsent, checkConsent };\n","import \"./styles/App.css\";\n\nimport { CookieConsent, checkConsent } from \"./components/CookieConsent\";\nimport React, { Suspense, lazy } from \"react\";\n\nconst BadJokes = lazy(() => import(\"./components/BadJokes\"));\nconst CoverImage = lazy(() => import(\"./components/CoverImage\"));\nconst Links = lazy(() => import(\"./components/Links\"));\nconst Avatar = lazy(() => import(\"./components/Avatar\"));\n\nfunction App() {\n  const HelloWorld = (\n    <div className=\"helloWorld\">\n      <h1>Greetings pilgrim</h1>\n      <h2>Welcome to my little corner of the internet</h2>\n      <h2>I'am Stefan and enjoy I building things!</h2>\n      <h3>Besides that I'am also a Father and maker of various things.</h3>\n    </div>\n  );\n  return (\n    <div>\n      <Suspense\n        fallback={\n          <div className=\"loadingMessage\">\n            <u>Winter</u> is coming...{\" \"}\n          </div>\n        }\n      >\n        <CoverImage />\n        <div className=\"app-container\">\n          <Avatar />\n          <div className=\"content\">\n            {HelloWorld}\n            <Links />\n          </div>\n          <>\n            <BadJokes />\n          </>\n          {!checkConsent(\"cookieConsentClicked\") && <CookieConsent />}\n        </div>\n      </Suspense>\n    </div>\n  );\n}\nexport default App;\n","import * as serviceWorker from './serviceWorkerRegistration';\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\nserviceWorker.register();"],"sourceRoot":""}